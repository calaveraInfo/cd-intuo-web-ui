/*
 * File: app/controller/Login.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CestaDomu.controller.Login', {
    extend: 'Ext.Base',

    requires: [
        'Ext.XTemplate',
        'CestaDomu.controller.Intuo'
    ],
    singleton: true,

    config: {
    },

    constructor: function() {
        this.callParent(arguments);
        this.url = CestaDomu.controller.Intuo.commonServiceUrlPart;
        this.safeDifference = 1000*60*7;
        this.template = new Ext.XTemplate(
            '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:dig="http://digres.cz/">',
                '<soapenv:Header/>',
                '<soapenv:Body>',
                    '<dig:Login>',
                        '<dig:strLoginName>{username}</dig:strLoginName>',
                        '<dig:strPassword>{password}</dig:strPassword>',
                    '</dig:Login>',
                '</soapenv:Body>',
            '</soapenv:Envelope>'
        );
    },

    login: function(data, scope, success, failure) {
        if((typeof(Storage)==="undefined")) {
            Ext.Msg.alert('Nepodporovaný prohlížeč', 'Váš prohlížeč nepodporuje technologie (local storage) vyžadované touto aplikací, prosím použijte jiný prohlížeč.');
        } else {
            Ext.Ajax.request({
                url: this.url,
                method: 'POST',
                scope: this,
                xmlData: this.template.apply(data),
                success: function(response, options) {
                    var authTokenTag = Ext.DomQuery.selectNode("LoginResult", response.responseXML);
                    if (authTokenTag) {
                        var token = authTokenTag.textContent;
                        if (token) {
                            this.saveToken(token);
                            this.saveCredentials(data.username, data.password);
                            Ext.callback(success, scope, [response, options]);
                            return;
                        }
                    }
                    Ext.callback(failure, scope, [response, options]);
                },
                failure: function(response, options) {
                    Ext.callback(failure, scope, [response, options]);
                }
            });
        }
    },

    isLoggedIn: function() {
        if (this.getCredentials()) {
            return true;
        } else {
            return false;
        }
    },

    isLoginActive: function() {
        if (new Date().getTime() - this.getTokenTime() < this.safeDifference) {
            return true;
        } else {
            return false;
        }
    },

    getCredentials: function() {
        if((typeof(Storage) !== "undefined")) {
            if (sessionStorage.username) {
                return {
                    username: sessionStorage.username,
                    password: sessionStorage.password
                };
            }
        }

        return null;
    },

    saveCredentials: function(username, password) {
        if((typeof(Storage) !== "undefined")) {
            sessionStorage.username = username;
            sessionStorage.password = password;
        }
    },

    getTokenTime: function() {
        if((typeof(Storage) !== "undefined")) {
            if (sessionStorage.tokenTime) {
                return parseInt(sessionStorage.tokenTime, 10);
            }
        }

        return 0;
    },

    saveTokenTime: function(time) {
        if((typeof(Storage) !== "undefined")) {
            sessionStorage.tokenTime = time;
        }
    },

    getToken: function() {
        if((typeof(Storage) !== "undefined")) {
            if (sessionStorage.token) {
                return sessionStorage.token;
            }
        }

        return '';
    },

    saveToken: function(token) {
        if((typeof(Storage) !== "undefined")) {
            sessionStorage.token = token;
            this.saveTokenTime(new Date().getTime());
        }
    },

    doLogged: function(scope, success) {
        if (this.isLoginActive()) {
            Ext.callback(success, scope);
        } else {
            this.refreshLogin(scope, success);
        }
    },

    refreshLogin: function(scope, success) {
        Ext.Msg.show({
            title: "Obnova přihlášení k serveru...",
            buttons: []
        });

        this.login(
            this.getCredentials(),
            this,
            function() {
                Ext.Msg.hide();
                Ext.callback(success, scope);
            },
            function () {
                Ext.Msg.alert('Chyba', 'Nepodařilo se obnovit přihlášení k serveru, prosím opakujte akci později.');
            }
        );
    }

});