/*
 * File: app/controller/CreateObject.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CestaDomu.controller.CreateObject', {
    extend: 'Ext.Base',

    requires: [
        'CestaDomu.controller.Intuo',
        'Ext.XTemplate'
    ],
    singleton: true,

    config: {
    },

    constructor: function() {
        this.callParent(arguments);
        this.url = CestaDomu.controller.Intuo.commonServiceUrlPart;
        this.template = new Ext.XTemplate(
            '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:dig="http://digres.cz/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">',
                '<soapenv:Header/>',
                '<soapenv:Body>',
                    '<dig:CreateObject>',
                        '<dig:strAuthKey>{token}</dig:strAuthKey>',
                        '<dig:strClassName>{requestParams.className}</dig:strClassName>',
                        '<dig:aData>',
                            '<tpl for="this.createDataArray(data[0])">',
                                '<dig:ArrayOfAnyType>',
                                    '<dig:anyType xsi:type="xsd:string">{name}</dig:anyType>',
                                    '<dig:anyType xsi:type="xsd:{type}">{value}</dig:anyType>',
                                '</dig:ArrayOfAnyType>',
                            '</tpl>',
                            '{dataXml}',
                        '</dig:aData>',
                    '</dig:CreateObject>',
                '</soapenv:Body>',
            '</soapenv:Envelope>',
            {
                createDataArray: function (data) {
                    var dataArray = [];
                    for (var key in data) {
                        if (key != 'ID') {
                            var o = data[key];
                            var type;
                            if (o!==null) {
                                switch(typeof(o)) {
                                    case "object":
                                        if(o.constructor.toString().indexOf("function Date()") > -1) {
                                            type = 'dateTime';
                                            //2014-01-14T12:15:54
                                            o = Ext.Date.format(o, 'Y-m-d\\TH:i:s');
                                        } else {
                                            throw 'Unknown data type.';
                                        }
                                        break;
                                    case "string":
                                        type = 'string';
                                        break;
                                    case "number":
                                        type = 'int';
                                        break;
                                    case "boolean":
                                        type = 'boolean';
                                        break;
                                    default:
                                        throw 'Unknown data type.';
                                }
                                dataArray.push({
                                    name: key,
                                    value: o,
                                    type: type
                                });
                            }
                        }
                    }
                    return dataArray;
                }
            }
        );
    }

});