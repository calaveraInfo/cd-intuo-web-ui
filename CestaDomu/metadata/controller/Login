{
    "type": "class",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Login",
        "requires": [
            "Ext.XTemplate",
            "CestaDomu.controller.Intuo"
        ],
        "singleton": true
    },
    "designerId": "93fbd195-54ca-43f8-bdf8-77f13022629e",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "constructor",
                "implHandler": [
                    "this.callParent(arguments);\r",
                    "this.url = CestaDomu.controller.Intuo.commonServiceUrlPart;\r",
                    "this.safeDifference = 1000*60*7;\r",
                    "this.maxDifference = 1000*60*9;\r",
                    "this.failDifference = 1000*60*12;\r",
                    "this.template = new Ext.XTemplate(\r",
                    "    '<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dig=\"http://digres.cz/\">',\r",
                    "        '<soapenv:Header/>',\r",
                    "        '<soapenv:Body>',\r",
                    "            '<dig:Login>',\r",
                    "                '<dig:strLoginName>{username}</dig:strLoginName>',\r",
                    "                '<dig:strPassword>{password}</dig:strPassword>',\r",
                    "            '</dig:Login>',\r",
                    "        '</soapenv:Body>',\r",
                    "    '</soapenv:Envelope>'\r",
                    ");"
                ]
            },
            "designerId": "00b39b09-0405-471c-8add-7d6fbe57ca1a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "data",
                    "scope",
                    "success",
                    "failure"
                ],
                "fn": "login",
                "implHandler": [
                    "if((typeof(Storage)===\"undefined\")) {\r",
                    "    Ext.Msg.alert('Nepodporovaný prohlížeč', 'Váš prohlížeč nepodporuje technologie (local storage) vyžadované touto aplikací, prosím použijte jiný prohlížeč.');\r",
                    "} else {\r",
                    "    Ext.Ajax.request({\r",
                    "        url: this.url,\r",
                    "        method: 'POST',\r",
                    "        scope: this,\r",
                    "        xmlData: this.template.apply(data),\r",
                    "        success: function(response, options) {\r",
                    "            var authTokenTag = Ext.DomQuery.selectNode(\"LoginResult\", response.responseXML);\r",
                    "            if (authTokenTag) {\r",
                    "                var token = authTokenTag.textContent;\r",
                    "                if (token) {\r",
                    "                    this.saveToken(token);\r",
                    "                    this.saveCredentials(data.username, data.password);\r",
                    "                    this.scheduleLoginRefresh();\r",
                    "                    Ext.callback(success, scope, [response, options]);\r",
                    "                    return;\r",
                    "                }\r",
                    "            }\r",
                    "            this.scheduleLoginRefresh();\r",
                    "            Ext.callback(failure, scope, [response, options]);\r",
                    "        },\r",
                    "        failure: function(response, options) {\r",
                    "            this.scheduleLoginRefresh();\r",
                    "            Ext.callback(failure, scope, [response, options]);\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ]
            },
            "designerId": "044cdff6-5dfb-4232-bb0a-327496a27e4b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loginRefresh",
                "implHandler": [
                    "var lastTokenTimeDifference = 0;\r",
                    "if (this.getTokenTime()) {\r",
                    "    lastTokenTimeDifference = new Date().getTime() - this.getTokenTime();\r",
                    "}\r",
                    "\r",
                    "this.login(\r",
                    "    this.getCredentials,\r",
                    "    this,\r",
                    "    function (response, options) {\r",
                    "        if (lastTokenTimeDifference > this.maxDifference) {\r",
                    "            Ext.Msg.alert('Přihlášení obnoveno', 'Přihlášení k serveru bylo obnoveno.');\r",
                    "        }\r",
                    "    },\r",
                    "    function(response, options) {\r",
                    "        return;\r",
                    "    }\r",
                    ");\r",
                    ""
                ]
            },
            "designerId": "e5f1831b-662b-4297-9140-73c0ec8fe9f5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "scheduleLoginRefresh",
                "implHandler": [
                    "if (this.getCredentials()) {\r",
                    "    var tokenTime = this.getTokenTime();\r",
                    "    if (tokenTime) {\r",
                    "        var oneMinute = 1000*60;\r",
                    "        var now = new Date();\r",
                    "        var difference = now.getTime() - tokenTime;\r",
                    "        if (difference > this.failDifference) {\r",
                    "            Ext.Msg.alert('Přihlášení vypršelo', 'Všechny pokusy o obnovu přihlášení selhaly, server je pravděpodobně trvale nedostupný.');\r",
                    "            this.saveCredentials('', '');\r",
                    "            this.setToken('');\r",
                    "        } else if (difference > this.maxDifference) {\r",
                    "            Ext.Msg.alert('Přihlášení vypršelo', 'Další pokus o obnovu přihlášení proběhne za 1 min. Do té doby nebude aplikace funkční.');\r",
                    "            Ext.defer(this.loginRefresh, oneMinute, this);\r",
                    "        } else if (difference > this.safeDifference) {\r",
                    "            Ext.defer(this.loginRefresh, oneMinute, this);\r",
                    "        } else {\r",
                    "            Ext.defer(this.loginRefresh, tokenTime + this.safeDifference - now.getTime(), this);\r",
                    "        }\r",
                    "    } else {\r",
                    "        this.loginRefresh();\r",
                    "    }\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "6b6487eb-1b89-4055-8d02-8b157e32bb02"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "isLoggedIn",
                "implHandler": [
                    "if (this.getToken() && this.getTokenTime()) {\r",
                    "    if (new Date().getTime() - this.getTokenTime() < this.maxDifference) {\r",
                    "        return true;\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "return false;"
                ]
            },
            "designerId": "8a8837cb-2d05-47f5-8315-c00956715e99"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getCredentials",
                "implHandler": [
                    "if((typeof(Storage) !== \"undefined\")) {\r",
                    "    if (sessionStorage.username) {\r",
                    "        return {\r",
                    "            username: sessionStorage.username,\r",
                    "            password: sessionStorage.password\r",
                    "        };\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "return null;"
                ]
            },
            "designerId": "59359975-d7d3-487c-a3a8-83709fe9b555"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "username",
                    "password"
                ],
                "fn": "saveCredentials",
                "implHandler": [
                    "if((typeof(Storage) !== \"undefined\")) {\r",
                    "    sessionStorage.username = username;\r",
                    "    sessionStorage.password = password;\r",
                    "}"
                ]
            },
            "designerId": "14a94e58-e444-44a4-84dc-380254066fec"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getTokenTime",
                "implHandler": [
                    "if((typeof(Storage) !== \"undefined\")) {\r",
                    "    if (sessionStorage.tokenTime) {\r",
                    "        return parseInt(sessionStorage.tokenTime, 10);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "return 0;"
                ]
            },
            "designerId": "26e25477-15c6-4006-a902-e31a6ecefb80"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getToken",
                "implHandler": [
                    "if((typeof(Storage) !== \"undefined\")) {\r",
                    "    if (sessionStorage.token) {\r",
                    "        return sessionStorage.token;\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "return '';"
                ]
            },
            "designerId": "1937d7cd-890c-4b10-997b-f15abf83bf2d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "token"
                ],
                "fn": "saveToken",
                "implHandler": [
                    "if((typeof(Storage) !== \"undefined\")) {\r",
                    "    sessionStorage.token = token;\r",
                    "    sessionStorage.tokenTime = new Date().getTime();\r",
                    "}"
                ]
            },
            "designerId": "6d5d4a61-4499-4d01-9e3b-b74255667d4f"
        }
    ]
}